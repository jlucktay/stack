before:
  hooks:
    - make clean
    - go mod download

# Runs 'go build'
builds:
  - main: ./

    flags:
      - -v

    ldflags:
      - >
        -s -w
        -X 'go.jlucktay.dev/stack/pkg/version.version={{ .Version }}'
        -X 'go.jlucktay.dev/stack/pkg/version.commit={{ .ShortCommit }}'
        -X 'go.jlucktay.dev/stack/pkg/version.date={{ .Date }}'
        -X 'go.jlucktay.dev/stack/pkg/version.builtBy=GoReleaser'

    env:
      - CGO_ENABLED=0

    # List of combinations of GOOS + GOARCH + GOARM to ignore.
    ignore:
      - goos: darwin
        goarch: 386

    # Set the modified timestamp on the output binary, typically you would do this to ensure a build was reproducible.
    # Pass empty string to skip modifying the output.
    mod_timestamp: "{{ .CommitTimestamp }}"

archives:
  - replacements:
      darwin: Darwin
      linux: Linux
      windows: Windows
      386: i386
      amd64: x86_64

checksum:
  name_template: "checksums.txt"

snapshot:
  name_template: "{{ .Tag }}-next"

brews:
  - # Repository to push the tap to.
    tap:
      owner: jlucktay
      name: homebrew-tap

    # Folder inside the repository to put the formula.
    folder: HomebrewFormula

    # Caveats for the user of your binary.
    caveats: |
      Please see the README for usage instructions:
      https://github.com/jlucktay/stack/blob/master/README.md

    # Your app's homepage.
    homepage: "https://github.com/jlucktay/stack"

    # Your app's description.
    description: |
      A support tool for use with Terraform stacks, Azure DevOps build pipelines, and GitHub projects/repos.

    # Setting this will prevent goreleaser to actually try to commit the updated formula - instead, the formula file
    # will be stored on the dist folder only, leaving the responsibility of publishing it to the user.
    # If set to auto, the release will not be uploaded to the homebrew tap in case there is an indicator for prerelease
    # in the tag e.g. v1.0.0-rc1
    # Default is false.
    skip_upload: false

    # # Packages your package depends on.
    # dependencies:
    #   - git
    #   - zsh

    # # Packages that conflict with your package.
    # conflicts:
    #   - svn
    #   - bash

    # So you can `brew test` your formula.
    test: |
      system "#{bin}/stack"

    # Custom install script for brew.
    install: |
      bin.install "stack"
      output = Utils.popen_read("#{bin}/stack completion bash")
      (bash_completion/"stack").write output
      prefix.install_metafiles

changelog:
  sort: asc
  filters:
    exclude:
      - "^docs:"
      - "^test:"
